import java.util.List;
import java.util.Set;

import javax.swing.JOptionPane;

public class MusicOrganizerController {

	private MusicOrganizerWindow view;
	private SoundClipBlockingQueue queue;
	private Album root;
	private Album selectedAlbum;
	private Album doubleSelectedAlbum;
	private UndoRedoHandler undoRedoHandler;
	
	
	
	public MusicOrganizerController() {
		
		
		root = new Album("All Sound Clips");
		
		undoRedoHandler = new UndoRedoHandler(root);
		
		
		// Create the View in Model-View-Controller
		view = new MusicOrganizerWindow(this);
		
		// Create the blocking queue
		queue = new SoundClipBlockingQueue();
		
		// Create a separate thread for the sound clip player and start it
		(new Thread(new SoundClipPlayer(queue))).start();
	}

	/**
	 * Load the sound clips found in all subfolders of a path on disk. If path is not
	 * an actual folder on disk, has no effect.
	 */
	public Set<SoundClip> loadSoundClips(String path) {
		Set<SoundClip> clips = SoundClipLoader.loadSoundClips(path);
		
		
		//STUDENT COMMENT: this makes no sense. our way of doing this is better.
			// TODO: Add the loaded sound clips to the root album
				//root.addSoundClips(clips);
		
		return clips;
	}
	
	/**
	 * Returns the root album
	 */
	public Album getRootAlbum(){
		return root;
	}
	
	/**
	 * Adds an album to the Music Organizer
	 */
	public void addNewAlbum(){ 
		
		assert (!(selectedAlbum.equals(null)));
		
		
		
		String name = view.promptForAlbumName();
		
		
		view.onAlbumAdded(new Album(selectedAlbum, name));
		 
		undoRedoHandler.change(root);
		
	}
	
	/**
	 * Removes an album from the Music Organizer
	 */
	public void removeAlbum(){ 

		if(selectedAlbum.getParent() != null) {
			view.onAlbumRemoved(selectedAlbum);

			undoRedoHandler.change(root);
		}
		
	}
	
	/**
	 * Adds sound clips to an album
	 */
	public void addSoundClips(Set<SoundClip> clips){
		
		
		
		//to prevent adding soundclip when nothing is selected.
		if (selectedAlbum != null) {
			selectedAlbum.addSoundClips(clips);

			view.onClipsUpdated();
			undoRedoHandler.change(root);
		}
		
		
	}	
	
	/**
	 * Adds sound clips to an album
	 * LEGACY CODE
	 */
	public void addSoundClips(){
		
		String directory = JOptionPane.showInputDialog("where is ur file??? please define the path :)");
//				"C:\\Users\\julkk\\git\\prog4\\uppgx_Norrman_Fransman\\sample-sound\\punk.wav"); //<-- default path for testing pourposes!
		
		
		//to prevent adding soundclip when nothing is selected.
		if (selectedAlbum != null) {
			selectedAlbum.addSoundClips(loadSoundClips(directory));

			view.onClipsUpdated();
			undoRedoHandler.change(root);
		}
		
		
	}
	
	/**
	 * Removes sound clips from an album
	 */
	public void removeSoundClips(){
		
		
		if(view.getSelectedSoundClips().equals(null)) {

			selectedAlbum.removeSoundClips(view.getSelectedSoundClips());
			
			undoRedoHandler.change(root);
			
			view.onClipsUpdated();
			
		}
		
	}
	
	/**
	 * Puts the selected sound clips on the queue and lets
	 * the sound clip player thread play them. Essentially, when
	 * this method is called, the selected sound clips in the 
	 * SoundClipTable are played.
	 */
	public void playSoundClips(){
		List<SoundClip> l = view.getSelectedSoundClips();
		for(int i=0;i<l.size();i++)
			queue.enqueue(l.get(i));
	}
	
	
	
	
	public void setSelected(Album album) {
		
		if (album != null) {
			selectedAlbum = album;
		}

	}	
	public Album getSelected() {
		
		return selectedAlbum;

	}
	
	public Album getDoubleSelectedAlbum() {
		return doubleSelectedAlbum;
	}
	
	/**
	 * autogenerated :)
	 * @param doubleSelectedAlbum
	 */
	public void setDoubleSelectedAlbum(Album doubleSelectedAlbum) {
		this.doubleSelectedAlbum = doubleSelectedAlbum;
		view.onClipsUpdated();
	}

	public void undo() {
		
		Album newRoot = undoRedoHandler.undo();
		
		if(!newRoot.equals(null)) {
			root = newRoot;
			System.out.println("hello");
		}
		
	}

	public void redo() {
		// TODO Auto-generated method stub
		
	}
	



	
	
	
	
	
}
